name: Development Deployment

on:
  push:
    branches: ['dev']
  pull_request:
    branches: ['dev']

jobs:
  build:
    runs-on: [self-hosted, Linux, X64, development]
    environment: development
    
    steps:
      - name: Fix permissions before checkout
        run: |
          sudo chown -R $(whoami):$(whoami) /opt/actions-runner/dev/_work || true
          sudo chmod -R 755 /opt/actions-runner/dev/_work || true
      
      - name: Clean previous build artifacts
        run: |
          sudo rm -rf /opt/actions-runner/dev/_work/hashland-api/hashland-api/dist || true
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Get user and group IDs
        id: ids
        run: |
          echo "uid=$(id -u)" >> $GITHUB_OUTPUT
          echo "gid=$(id -g)" >> $GITHUB_OUTPUT
      
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/hashland-api:dev -f Dockerfile.dev --build-arg USER_ID=${{ steps.ids.outputs.uid }} --build-arg GROUP_ID=${{ steps.ids.outputs.gid }} .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/hashland-api:development -f Dockerfile.dev --build-arg USER_ID=${{ steps.ids.outputs.uid }} --build-arg GROUP_ID=${{ steps.ids.outputs.gid }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/hashland-api:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/hashland-api:development

  deploy:
    needs: build
    runs-on: [self-hosted, Linux, X64, development]
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" > .env
          echo "DATABASE_NAME=main" >> .env
          echo "JWT_EXPIRATION=24h" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "MONGO_URI=mongodb://${{ secrets.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@mongo:27017/main?authSource=admin" >> .env
          echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}" >> .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "PORT=8080" >> .env
          echo "REDIS_URI=redis://redis:6379" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TON_API_KEY=${{ secrets.TON_API_KEY }}" >> .env
          echo "TON_API_ENDPOINT=${{ secrets.TON_API_ENDPOINT }}" >> .env
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}" >> .env
          echo "TON_RECEIVER_ADDRESS=${{ secrets.TON_RECEIVER_ADDRESS }}" >> .env
          echo "TON_X_API_KEY=${{ secrets.TON_X_API_KEY }}" >> .env
          echo "NODE_ENV=development" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
      
      - name: Modify docker-compose for pre-built image
        run: |
          sed -i 's/build:[^}]*}/image: ${{ secrets.DOCKER_USERNAME }}\/hashland-api:development/g' docker-compose.yml
      
      - name: Deploy with docker-compose
        run: |
          docker compose down
          docker compose up -d 